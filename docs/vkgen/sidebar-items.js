initSidebarItems({"enum":[["ArraySize",""],["ArrayType","C array type"],["Definition",""],["EnumerationElement",""],["EnumsElement",""],["ExtensionElement",""],["ExtensionSpecificationElement",""],["ExtensionType","Specifies the kind of extension"],["FeatureElement",""],["FeatureReference",""],["HandleType","Whether the handle is dispatchable or not."],["InOut",""],["IncludeStyle","Specifies whether to use `\"\"` or `<>` around the include name."],["Pipeline",""],["ReferenceType",""],["RegistryElement",""],["Renderpass",""],["StructElement",""]],"struct":[["Array","C array (dynamic or static)"],["BarValue",""],["Bitmask","Definition that specifies a bitmask, using a particular existing type. Contents are the same as `typedef`. The possible bits can be defined by a specific, referenced enumeration."],["Command","Defines a single Vulkan entrypoint."],["Commands","Defines a list of Vulkan entrypoints."],["Constant","C constant"],["Constants",""],["Define","C `#define` statement."],["Definitions","List of all definitions used by Vulkan"],["Enum",""],["Enumeration",""],["EnumerationDeclaration","Declares the name of an enumeration. The members and base type of the enumeration are defined elsewhere."],["Enums",""],["Extension","Specifies the types exposed/forbidden by an extension"],["ExtensionConstant","Defines a constant exported by an extension. These are not enumerators."],["ExtensionEnum","Declares a new enumerator that is added to an existing enumerator."],["ExtensionSpecification",""],["Extensions",""],["ExternalSync","Describes instances of implicit external synchronizations. These cannot be captured by the parameters themselves."],["Feature","Defines the base API for a Vulkan specification. Represents a specific major/minor version of Vulkan."],["FeatureSpecification",""],["Features",""],["FunctionPointer","If it has no function parameters, then it should be rendered out for C/C++ with just \"void\" in the parameter list. And just \"void\" should not be in a `<type>` element, as it does not qualify as a parameter type."],["Handle","Creates a definition for a handle."],["Include","Definition that represents a file being included, which is named. The `name` attribute does double-duty, in that it also includes text."],["NamedIdentifier",""],["Parameter",""],["Range","Represents a range of enumerators."],["Reference","Definition that references a type that potentially comes from an include file."],["Registry",""],["ResultCodes",""],["ReturnType",""],["Struct","Definition that represents a data structure. Contains a list of members and optional validation information."],["StructMember","Specifies a named member of a data structure."],["Tag","A single author for Vulkan"],["Tags","List of authors"],["Type","All of the attributes that represent the type of a struct member, function parameter or return value."],["Typedef","Definition that defines a new name for an existing type."],["Union","Defines a union, where the object's value is only one of the members."],["UnionMember","Specifies a named member of a union."],["Variable","Data model describing type information for a variable."],["VendorId",""],["VendorIds","List of identifiers for vendors."]],"type":[["CExpression","Text that is an expression in C."],["CommaSeparatedBooleans","Comma-separated boolean values."],["CommaSeparatedIdentifiers","Comma-separated identifiers values. Can be empty."],["HexadecimalNumber","Recognize a hexadecimal number. Not prefixed with \"0x\""],["Identifier","Should be a valid C/C++ identifier."]]});